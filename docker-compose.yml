version: '3'

networks:
  app-tier:
    name: talk-streaming-network

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    networks:
      - app-tier
    environment:
      - "ALLOW_ANONYMOUS_LOGIN=yes"

  kafka:
    image: 'bitnami/kafka:3.0'
    container_name: kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    depends_on:
      - zookeeper      
    networks:
      - app-tier
    environment:
      - "ALLOW_PLAINTEXT_LISTENER=yes"
      - "KAFKA_CFG_LISTENERS=PLAINTEXT://:9092"
      - "KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092"
      - "KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181"

  kafka-akhq:
    image: tchiotludo/akhq
    container_name: kafka-akhq
    networks:
      - app-tier    
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
    ports:
      - 8090:8080
    depends_on:
      - kafka

  datareference:
      image: postgres:14.3
      container_name: datareference
      ports:
        - "5432:5432"
      environment:
        - POSTGRES_PASSWORD=password
        - POSTGRES_USER=postgres
        - POSTGRES_DB=referencedata
      volumes:
        - "./postgresql/input_postgresql-docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/"
      networks:
        - app-tier

  nifi:
    image: apache/nifi:1.17.0
    container_name: nifi
    ports:
      - "8888:8080"
      - "8443:8443"
    volumes:
      - "./nifi/lib/:/usr/lib/postgres"
    environment:
      - "SINGLE_USER_CREDENTIALS_USERNAME=admin"
      - "SINGLE_USER_CREDENTIALS_PASSWORD=ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB"
      - "NIFI_WEB_PROXY_HOST=nifi:8443"
    networks:
      - app-tier

  nifi-registry:
    image: apache/nifi-registry:1.17.0
    container_name: nifi-registry
    ports:
      - "18080:18080"
    networks:
      - app-tier
    volumes:
      - ./nifiRegistry/flow-storage:/opt/nifi-registry/nifi-registry-current/flow_storage
      - ./nifiRegistry/database:/opt/nifi-registry/nifi-registry-current/database

  flink-jobmanager:
    build:
      context: ./flink
    ports:
      - "8085:8081"
    command: jobmanager
    container_name: flink-jobmanager
    networks:
      - app-tier    
    volumes:
      - "./flink/stream_java_api/target:/usr/local/flink/java_stream_api"
      - ./flink/table_api:/usr/local/flink/table_api
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager        

  flink-taskmanager:
    build:
      context: ./flink
    depends_on:
      - flink-jobmanager
    command: taskmanager
    container_name: flink-taskmanager
    scale: 1
    networks:
      - app-tier    
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 10
        
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.27.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    networks:
      - app-tier
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_WORKER_CONFIG: "/connect/connect.properties"
    volumes:
      - ./ksqldb/connect.properties:/connect/connect.properties

  ksqldb-client:
    image: confluentinc/ksqldb-cli:0.27.1
    container_name: ksqldb-client
    depends_on:
      - kafka
      - ksqldb-server
    networks:
      - app-tier
    entrypoint: /bin/sh
    tty: true
    
  influxdb:
    image: influxdb:2.1.0-alpine
    container_name: influxdb
    networks:
      - app-tier
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: volcamp
      DOCKER_INFLUXDB_INIT_PASSWORD: this_is_my_long_password
      DOCKER_INFLUXDB_INIT_ORG: volcamp
      DOCKER_INFLUXDB_INIT_BUCKET: volcamp
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: some_very_secret_token
    ports:
      - "8086:8086"

  telegraf:
    image: telegraf:1.21.1-alpine
    networks:
      - app-tier
    container_name: influxdb-telegraf
    environment:
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: some_very_secret_token
      DOCKER_INFLUXDB_INIT_ORG: volcamp
      DOCKER_INFLUXDB_INIT_BUCKET: volcamp
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    depends_on:
      - influxdb
      - kafka      
      
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.4.10
    container_name: kafka-control-center
    networks:
      - app-tier
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_KSQL_URL: "http://ksqldb:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 104857600
      CONTROL_CENTER_DEPRECATED_VIEWS_ENABLE: "true"